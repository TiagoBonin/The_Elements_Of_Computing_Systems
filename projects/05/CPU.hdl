// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // check if is A instriction
    Not(in=instruction[15], out=isAInstruction);

    // evaluate what A might be
    Mux16(a=aluOut, b=instruction, sel=isAInstruction, out=valueToA);
    // write to A if instructed
    Or(a=isAInstruction, b=instruction[5], out=loadA);
    ARegister(in=valueToA, load=loadA, out=registerA, out[0..14]=addressM);    

    // writes to D if instructed
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluOut, load=loadD, out=registerD);

    // decides if alu operates with A or M
    Mux16(a=registerA, b=inM, sel=instruction[12], out=AMValue);    

    // execute function in the ALU
    ALU(x=registerD, y=AMValue,
        zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
        out=aluOut, out=outM, zr=aluIsZero, ng=aluIsNegative);
    
    // evaluate jump
    Or(a=aluIsZero, b=aluIsNegative, out=notPositive);    
    Not(in=notPositive, out=aluIsPositive);

    And(a=aluIsPositive, b=instruction[0], out=JGT);
    And(a=aluIsZero, b=instruction[1], out=JEQ);
    And(a=aluIsNegative, b=instruction[2], out=JLT);

    Or(a=JGT, b=JEQ, out=jump1);    
    Or(a=jump1, b=JLT, out=jump2);    
    And(a=jump2, b=instruction[15], out=shouldJump);
    Not(in=shouldJump, out=shouldIncrement);
    
    // evaluate if should save in memory
    And(a=instruction[15], b=instruction[3], out=writeM);

    PC(in=registerA, load=shouldJump, inc=shouldIncrement, reset=reset, out[0..14]=pc);
}